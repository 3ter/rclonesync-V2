:MSG:	1) First, see that --check-access passes with the initial setup
../rclonesync.py ./testdir/path1/ ./testdir/path2/ --check-access --check-filename .chk_file --verbose --workdir ./testwd/ --no-datetime-log --rclone rclone
***** BiDirectional Sync for Cloud Services using rclone *****
Synching Path1  <./testdir/path1/>  with Path2  <./testdir/path2/>
Command line:  <Namespace(Path1='./testdir/path1/', Path2='./testdir/path2/', check_access=True, check_filename='.chk_file', dry_run=False, filters_file=None, first_sync=False, force=False, max_deletes=50, no_datetime_log=True, rc_verbose=None, rclone='rclone', remove_empty_directories=False, verbose=True, workdir='./testwd/')>
>>>>> Checking Path1 and Path2 rclone filesystems access health
>>>>> Path1 Checking for Diffs
>>>>> Path2 Checking for Diffs
>>>>> No changes on Path2 - Skipping ahead
>>>>> No changes on Path1 or Path2 - Skipping sync from Path1 to Path2
>>>>> Refreshing Path1 and Path2 lsl files
>>>>> Successful run.  All done.

:MSG:	2) Delete the remote subdir .chk_file, run sync, will fail critical
rclone delete ./testdir/path2/subdir/.chk_file
../rclonesync.py ./testdir/path1/ ./testdir/path2/ --check-access --check-filename .chk_file --verbose --workdir ./testwd/ --no-datetime-log --rclone rclone
***** BiDirectional Sync for Cloud Services using rclone *****
Synching Path1  <./testdir/path1/>  with Path2  <./testdir/path2/>
Command line:  <Namespace(Path1='./testdir/path1/', Path2='./testdir/path2/', check_access=True, check_filename='.chk_file', dry_run=False, filters_file=None, first_sync=False, force=False, max_deletes=50, no_datetime_log=True, rc_verbose=None, rclone='rclone', remove_empty_directories=False, verbose=True, workdir='./testwd/')>
>>>>> Checking Path1 and Path2 rclone filesystems access health
  ERROR    Failed access health test:  <.chk_file> Path1 count 2, Path2 count 1 - 
  ERROR    Failed access health test:  Path1 key <subdir/.chk_file> not found in Path2 - 
***** Critical Error Abort - Must run --first-sync to recover.  See README.md *****

:MSG:	3) Put the remote subdir .chk_file back, run --first-sync
rclone copy ./testdir/path1/subdir/.chk_file ./testdir/path2/
../rclonesync.py ./testdir/path1/ ./testdir/path2/ --check-access --first-sync --check-filename .chk_file --verbose --workdir ./testwd/ --no-datetime-log --rclone rclone
***** BiDirectional Sync for Cloud Services using rclone *****
Synching Path1  <./testdir/path1/>  with Path2  <./testdir/path2/>
Command line:  <Namespace(Path1='./testdir/path1/', Path2='./testdir/path2/', check_access=True, check_filename='.chk_file', dry_run=False, filters_file=None, first_sync=True, force=False, max_deletes=50, no_datetime_log=True, rc_verbose=None, rclone='rclone', remove_empty_directories=False, verbose=True, workdir='./testwd/')>
>>>>> --first-sync copying any unique Path2 files to Path1
>>>>> --check-access skipped on --first-sync
>>>>> Path1 Checking for Diffs
>>>>> Path2 Checking for Diffs
>>>>> No changes on Path2 - Skipping ahead
>>>>> Synching Path1 to Path2
>>>>> Refreshing Path1 and Path2 lsl files
>>>>> Successful run.  All done.

:MSG:	4) Run sync with --check-access.  Should pass.
../rclonesync.py ./testdir/path1/ ./testdir/path2/ --check-access --check-filename .chk_file --verbose --workdir ./testwd/ --no-datetime-log --rclone rclone
***** BiDirectional Sync for Cloud Services using rclone *****
Synching Path1  <./testdir/path1/>  with Path2  <./testdir/path2/>
Command line:  <Namespace(Path1='./testdir/path1/', Path2='./testdir/path2/', check_access=True, check_filename='.chk_file', dry_run=False, filters_file=None, first_sync=False, force=False, max_deletes=50, no_datetime_log=True, rc_verbose=None, rclone='rclone', remove_empty_directories=False, verbose=True, workdir='./testwd/')>
>>>>> Checking Path1 and Path2 rclone filesystems access health
>>>>> Path1 Checking for Diffs
>>>>> Path2 Checking for Diffs
>>>>> No changes on Path2 - Skipping ahead
>>>>> No changes on Path1 or Path2 - Skipping sync from Path1 to Path2
>>>>> Refreshing Path1 and Path2 lsl files
>>>>> Successful run.  All done.

